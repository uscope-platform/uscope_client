@top Program { Instruction* }

@skip { space | LineComment | BlockComment}

Instruction {
 ( RegInstruction    |
  CselInstruction   |
  LoadInstruction   |
  ConvInstruction   |
  IndependentInstruction
 ) newline
}

IndependentInstruction {
  Opcode
}

RegInstruction {
  Opcode Register','Register','Register
}

LoadInstruction {
  Opcode Register','Number
}

ConvInstruction {
  Opcode Register','Register
}

CselInstruction {
  Opcode Register','Register','Register ','Register
}

@tokens {

  Opcode {
    CselOpcode | ConvOpcode | LoadOpcode | RegOpcode | IndependentOpcode
  }

  Number {FloatNumber | IntegerNumber}

  IntegerNumber {  @digit+}

  FloatNumber{@digit+ '.' @digit+}

  RegOpcode {'add' | 'sub' | 'mul' | 'and' | 'or' | 'satp' | 'satn' | 'efi' | 'bset' | 'bsel' | 'xor'| 'ble' | 'bgt' | 'beq' | 'bne'}

  ConvOpcode {'itf' | 'fti' | 'not' | 'rec' | 'abs'| 'popcnt' | 'mov'}

  IndependentOpcode {'stop' | 'nop'}

  CselOpcode {'csel'}

  LoadOpcode {'ldc'}

  Register { 'r' @digit+}

  LineComment { "//" ("\\" (![\n] | "\\r"? "\\n") | ![\n])* }

  BlockComment { "/*" blockCommentRest }

  space { @whitespace+ }

  newline {"\n"}

  @precedence { newline, space}

  blockCommentRest { ![*] blockCommentRest | "*" blockCommentAfterStar }

  blockCommentAfterStar { "/" | "*" blockCommentAfterStar | ![/*] blockCommentRest }

}

@detectDelim